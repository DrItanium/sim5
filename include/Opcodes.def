    #define Privileged true
    #define Unprivileged false
    #define GeneralOperation(name, code, str, level, privileged) X(name, code, str, level, privileged)
    #define Operation(name, code, level) GeneralOperation(name, code, #name, level, Unprivileged)
    #define PrivilegedOperation(name, code, level) GeneralOperation(name, code, #name, level, Privileged)
    Operation(b, 0x08, Core)
    Operation(call, 0x09, Core)
    Operation(ret, 0x0a, Core)
    Operation(bal, 0x0b, Core)
    // the lowest three bits are used to determine the kind of operation to
    // perform when it comes to compares, tests, faults, branches, etc
    // This maps perfectly to the condition code to be used
    Operation(bno, 0x10, Core)
    Operation(bg, 0x11, Core)
    Operation(be, 0x12, Core)
    Operation(bge, 0x13, Core)
    Operation(bl, 0x14, Core)
    Operation(bne, 0x15, Core)
    Operation(ble, 0x16, Core)
    Operation(bo, 0x17, Core)
    Operation(faultno, 0x18, Core)
    Operation(faultg, 0x19, Core)
    Operation(faulte, 0x1a, Core)
    Operation(faultge, 0x1b, Core)
    Operation(faultl, 0x1c, Core)
    Operation(faultne, 0x1d, Core)
    Operation(faultle, 0x1e, Core)
    Operation(faulto, 0x1f, Core)
    Operation(testno, 0x20, Core)
    Operation(testg, 0x21, Core)
    Operation(teste, 0x22, Core)
    Operation(testge, 0x23, Core)
    Operation(testl, 0x24, Core)
    Operation(testne, 0x25, Core)
    Operation(testle, 0x26, Core)
    Operation(testo, 0x27, Core)

    Operation(bbc, 0x30, Core)
    Operation(cmpobg, 0x31, Core)
    Operation(cmpobe, 0x32, Core)
    Operation(cmpobge, 0x33, Core)
    Operation(cmpobl, 0x34, Core)
    Operation(cmpobne, 0x35, Core)
    Operation(cmpoble, 0x36, Core)
    Operation(bbs, 0x37, Core)
    Operation(cmpibno, 0x38, Core)
    Operation(cmpibg, 0x39, Core)
    Operation(cmpibe, 0x3a, Core)
    Operation(cmpibge, 0x3b, Core)
    Operation(cmpibl, 0x3c, Core)
    Operation(cmpibne, 0x3d, Core)
    Operation(cmpible, 0x3e, Core)
    Operation(cmpibo, 0x3f, Core)
    // mem instructions are denoted to have the most significant bit of the
    // opcode set.
    //
    // The layout is somewhat baffling to me but there seems to be a method to
    // the madness the more I look at it.
    //
    // the v in the names means virtual, only found on the extended
    // architecture which I am noting here for completeness
    //
    // So the least significant bit of the major opcode denotes a virtual
    // memory operation if the lower part is 0,1,2,3 or 8,9,a,b
    // loads are always 0,1, 8, or 9  and stores are always  2, 3, a, or b
    Operation(ldob, 0x80, Extended)
    Operation(ldvob, 0x81, Extended)
    Operation(stob, 0x82, Extended)
    Operation(stvob, 0x83, Extended)
    Operation(bx, 0x84, Core)
    Operation(balx, 0x85, Core)
    Operation(callx, 0x86, Core)
    Operation(ldos, 0x88, Core)
    Operation(ldvos, 0x89, Extended)
    Operation(stos, 0x8a, Core)
    Operation(stvos, 0x8b, Extended)
    Operation(lda, 0x8c, Core)
    Operation(ld, 0x90, Core)
    Operation(ldv, 0x91, Extended)
    Operation(st, 0x92, Core)
    Operation(stv, 0x93, Extended)
    Operation(ldl, 0x98, Core)
    Operation(ldvl, 0x99, Extended)
    Operation(stl, 0x9a, Core)
    Operation(stvl, 0x9b, Extended)
    Operation(ldt, 0xa0, Core)
    Operation(ldvt, 0xa1, Extended)
    Operation(stt, 0xa2, Core)
    Operation(stvt, 0xa3, Extended)
    Operation(dcinva, 0xad, NewCore)  // hx specific instruction
    Operation(ldq, 0xb0, Core)
    Operation(ldvq, 0xb1, Extended)
    Operation(stq, 0xb2, Core)
    Operation(stvq, 0xb3, Extended)
    Operation(ldib, 0xc0, Core)
    Operation(ldvib, 0xc1, Extended)
    Operation(stib, 0xc2, Core)
    Operation(stvib, 0xc3, Extended)
    Operation(ldis, 0xc8, Core)
    Operation(ldvis, 0xc9, Extended)
    Operation(stis, 0xca, Core)
    Operation(stvis, 0xcb, Extended)
    Operation(ldm, 0xd0, Extended)
    Operation(ldvm, 0xd1, Extended)
    Operation(stm, 0xd2, Extended)
    Operation(stvm, 0xd3, Extended)
    Operation(ldml, 0xd8, Extended)
    Operation(ldvml, 0xd9, Extended)
    Operation(stml, 0xda, Extended)
    Operation(stvml, 0xdb, Extended)

    Operation(ldmq, 0xf0, Extended)
    Operation(ldvmq, 0xf1, Extended)
    Operation(stmq, 0xf2, Extended)
    Operation(stvmq, 0xf3, Extended)
    // register operations
    // They have an extra 4 bits of opcode used to expand the instruction space
    // to kinda 12-bit, the range in the major opcode is 0x58->0x7F
    Operation(notbit, 0x580, Core)
    GeneralOperation(andOperation, 0x581, "and", Core, Unprivileged)
    Operation(andnot, 0x582, Core)
    Operation(setbit, 0x583, Core)
    Operation(notand, 0x584, Core)
    GeneralOperation(xorOperation, 0x586, "xor", Core, Unprivileged)
    GeneralOperation(orOperation, 0x587, "or", Core, Unprivileged)
    Operation(nor, 0x588, Core)
    Operation(xnor, 0x589, Core)
    GeneralOperation(notOperation, 0x58a, "not", Core, Unprivileged)
    Operation(ornot, 0x58b, Core)
    Operation(clrbit, 0x58c, Core)
    Operation(notor, 0x58d, Core)
    Operation(nand, 0x58e, Core)
    Operation(alterbit, 0x58f, Core)

    Operation(addo, 0x590, Core)
    Operation(addi, 0x591, Core)
    Operation(subo, 0x592, Core)
    Operation(subi, 0x593, Core)
    Operation(cmpob, 0x594, Core)
    Operation(cmpib, 0x595, Core)
    Operation(cmpos, 0x596, Core)
    Operation(cmpis, 0x597, Core)
    Operation(shro, 0x598, Core)
    Operation(shrdi, 0x59a, Core)
    Operation(shri, 0x59b, Core)
    Operation(shlo, 0x59c, Core)
    Operation(rotate, 0x59d, Core)
    Operation(shli, 0x59e, Core)
    // hole
    Operation(cmpo, 0x5a0, Core)
    Operation(cmpi, 0x5a1, Core)
    Operation(concmpo, 0x5a2, Core)
    Operation(concmpi, 0x5a3, Core)
    Operation(cmpinco, 0x5a4, Core)
    Operation(cmpinci, 0x5a5, Core)
    Operation(cmpdeco, 0x5a6, Core)
    Operation(cmpdeci, 0x5a7, Core)
    Operation(chktag, 0x5a8, Extended)
    Operation(cmpm, 0x5aa, Extended)
    Operation(scanbyte, 0x5ac, Core)
    Operation(bswap, 0x5ad, NewCore)
    Operation(chkbit, 0x5ae, Core)

    Operation(addc, 0x5b0, Core)
    Operation(subc, 0x5b2, Core)
    Operation(intdis, 0x5b4, NewCore)
    Operation(inten, 0x5b5, NewCore)
    Operation(mov, 0x5cc, Core)
    Operation(movm, 0x5cd, Extended)
    Operation(eshro, 0x5d8, Core)
    Operation(movl, 0x5dc, Core)
    Operation(movlm, 0x5dd, Extended)

    Operation(movt, 0x5ec, Core)
    Operation(movq, 0x5fc, Core)
    Operation(movqm, 0x5fd, Extended)

    Operation(synmov, 0x600, Core)
    Operation(synmovl, 0x601, Core)
    Operation(synmovq, 0x602, Core)
    Operation(cmpstr, 0x603, Protected)
    Operation(movqstr, 0x604, Protected)
    Operation(movstr, 0x605, Protected)

    Operation(atmod, 0x610, Core)
    Operation(atrep, 0x611, Extended)
    Operation(atadd, 0x612, Core)
    Operation(inspacc, 0x613, Protected)
    Operation(ldphy, 0x614, Protected)
    Operation(synld, 0x615, Core)
    Operation(fill, 0x617, Protected)
    // 0x62 not used
    // Cx specific instructions
    Operation(sdma, 0x630, NewCore)
    Operation(udma, 0x631, NewCore)

    Operation(spanbit, 0x640, Core)
    Operation(scanbit, 0x641, Core)
    Operation(daddc, 0x642, Numerics)
    Operation(dsubc, 0x643, Numerics)
    Operation(dmovt, 0x644, Numerics)
    Operation(modac, 0x645, Core)
    PrivilegedOperation(condrec, 0x646, Protected)
    Operation(cread, 0x648, Extended)
    Operation(ldtypedef, 0x649, Extended)
    Operation(ldglobals, 0x64a, Extended)

    Operation(modify, 0x650, Core)
    Operation(extract, 0x651, Core)
    GeneralOperation(restrictOperation, 0x652, "restrict", Extended, Unprivileged) // unsure if this is privileged or not, part of extended architecture
    Operation(amplify, 0x653, Extended) // part of extended architecture
    Operation(modtc, 0x654, Core)
    Operation(modpc, 0x655, Core)
    PrivilegedOperation(receive, 0x656, Protected)
    Operation(ldcsp, 0x657, Extended)
    Operation(intctl, 0x658, NewCore)
    Operation(sysctl, 0x659, NewCore) // Jx instruction that I am going to support the same way
                    // we do IAC instructions. The format of the sysctl
                    // "packet" is nearly identical to an IAC with the order of
                    // fields in the first 32-bit being reversed
    Operation(iccctl, 0x65b, NewCore)
    Operation(dcctl, 0x65c, NewCore)

    Operation(halt, 0x65d, NewCore) // page missing from the Hx manual but in the Jx manual...
                  // oops

    Operation(calls, 0x660, Core)
    PrivilegedOperation(calld, 0x661, Extended)
    PrivilegedOperation(send, 0x662, Protected)
    PrivilegedOperation(sendserv, 0x663, Protected)
    PrivilegedOperation(resumprcs, 0x664, Protected)
    PrivilegedOperation(schedprcs, 0x665, Protected)
    PrivilegedOperation(saveprcs, 0x666, Protected)
    PrivilegedOperation(condwait, 0x668, Protected)
    PrivilegedOperation(wait, 0x669, Protected)
    PrivilegedOperation(signal, 0x66a, Protected)
    Operation(mark, 0x66b, Core)
    Operation(fmark, 0x66c, Core)
    Operation(flushreg, 0x66d, Core)
    Operation(syncf, 0x66f, Core)

    Operation(emul, 0x670, Core)
    Operation(ediv, 0x671, Core)
    Operation(cvtadr, 0x672, Extended)
    Operation(ldtime, 0x673, Protected)
    Operation(cvtir, 0x674, Numerics)
    Operation(cvtilr, 0x675, Numerics)
    Operation(scalerl, 0x676, Numerics)
    Operation(scaler, 0x677, Numerics)

    Operation(atanr, 0x680, Numerics)
    Operation(logepr, 0x681, Numerics)
    Operation(logr, 0x682, Numerics)
    Operation(remr, 0x683, Numerics)
    Operation(cmpor, 0x684, Numerics)
    Operation(cmpr, 0x685, Numerics)
    Operation(sqrtr, 0x688, Numerics)
    Operation(expr, 0x689, Numerics)
    Operation(logbnr, 0x68a, Numerics)
    Operation(roundr, 0x68b, Numerics)
    Operation(sinr, 0x68c, Numerics)
    Operation(cosr, 0x68d, Numerics)
    Operation(tanr, 0x68e, Numerics)
    Operation(classr, 0x68f, Numerics)

    Operation(atanrl, 0x690, Numerics)
    Operation(logeprl, 0x691, Numerics)
    Operation(logrl, 0x692, Numerics)
    Operation(remrl, 0x693, Numerics)
    Operation(cmporl, 0x694, Numerics)
    Operation(cmprl, 0x695, Numerics)
    Operation(sqrtrl, 0x698, Numerics)
    Operation(exprl, 0x699, Numerics)
    Operation(logbnrl, 0x69a, Numerics)
    Operation(roundrl, 0x69b, Numerics)
    Operation(sinrl, 0x69c, Numerics)
    Operation(cosrl, 0x69d, Numerics)
    Operation(tanrl, 0x69e, Numerics)
    Operation(classrl, 0x69f, Numerics)

    Operation(cvtri, 0x6c0, Numerics)
    Operation(cvtril, 0x6c1, Numerics)
    Operation(cvtzri, 0x6c2, Numerics)
    Operation(cvtzril, 0x6c3, Numerics)
    Operation(movr, 0x6c9, Numerics)

    Operation(movrl, 0x6d9, Numerics)

    Operation(cpysre, 0x6e2, Numerics)
    Operation(cpyrsre, 0x6e3, Numerics)
    Operation(movre, 0x6e9, Numerics)

    Operation(mulo, 0x701, Core)
    Operation(remo, 0x708, Core)
    Operation(divo, 0x70b, Core)

    Operation(muli, 0x741, Core)
    Operation(remi, 0x748, Core)
    Operation(modi, 0x749, Core)
    Operation(divi, 0x74b, Core)


    Operation(divr, 0x78b, Numerics)
    Operation(mulr, 0x78c, Numerics)
    Operation(subr, 0x78d, Numerics)
    Operation(addr, 0x78f, Numerics)

    Operation(divrl, 0x79b, Numerics)
    Operation(mulrl, 0x79c, Numerics)
    Operation(subrl, 0x79d, Numerics)
    Operation(addrl, 0x79f, Numerics)

    // new core instructions
    Operation(addono, 0x780, NewCore)
    Operation(addog, 0x790, NewCore)
    Operation(addoe, 0x7a0, NewCore)
    Operation(addoge, 0x7b0, NewCore)
    Operation(addol, 0x7c0, NewCore)
    Operation(addone, 0x7d0, NewCore)
    Operation(addole, 0x7e0, NewCore)
    Operation(addoo, 0x7f0, NewCore)
    Operation(addino, 0x781, NewCore)
    Operation(addig, 0x791, NewCore)
    Operation(addie, 0x7a1, NewCore)
    Operation(addige, 0x7b1, NewCore)
    Operation(addil, 0x7c1, NewCore)
    Operation(addine, 0x7d1, NewCore)
    Operation(addile, 0x7e1, NewCore)
    Operation(addio, 0x7f1, NewCore)
    Operation(subono, 0x782, NewCore)
    Operation(subog, 0x792, NewCore)
    Operation(suboe, 0x7a2, NewCore)
    Operation(suboge, 0x7b2, NewCore)
    Operation(subol, 0x7c2, NewCore)
    Operation(subone, 0x7d2, NewCore)
    Operation(subole, 0x7e2, NewCore)
    Operation(suboo, 0x7f2, NewCore)
    Operation(subino, 0x783, NewCore)
    Operation(subig, 0x793, NewCore)
    Operation(subie, 0x7a3, NewCore)
    Operation(subige, 0x7b3, NewCore)
    Operation(subil, 0x7c3, NewCore)
    Operation(subine, 0x7d3, NewCore)
    Operation(subile, 0x7e3, NewCore)
    Operation(subio, 0x7f3, NewCore)
    Operation(selno, 0x784, NewCore)
    Operation(selg, 0x794, NewCore)
    Operation(sele, 0x7a4, NewCore)
    Operation(selge, 0x7b4, NewCore)
    Operation(sell, 0x7c4, NewCore)
    Operation(selne, 0x7d4, NewCore)
    Operation(selle, 0x7e4, NewCore)
    Operation(selo, 0x7f4, NewCore)
    #undef Operation
    #undef GeneralOperation
    #undef Privileged
    #undef PrivilegedOperation
    #undef Unprivilged